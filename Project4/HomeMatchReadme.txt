HomeMatch Documentation
Overview
HomeMatch is a property listing matching system that uses semantic search and user preferences to find the most suitable property listings. This document provides an overview of the functionality, how to run the code, and any prerequisites or dependencies.

Functionality
HomeMatch allows users to:

Add property listings to a ChromaDB collection.
Perform semantic searches based on user preferences.
Augment search results with explanations generated by a language model (LLM).
Prerequisites
Before running the code, ensure you have the following installed:

Python 3.6 or higher
Dependencies
The required libraries and dependencies are specified in the requirements.txt file. The file includes the following:

# Existing Repository Requirements
langchain==0.0.305
openai==0.28.1
pydantic>=1.10.12
pytest>=7.4.0
sentence-transformers>=2.2.0
transformers>=4.31.0
chromadb==0.4.12
jupyter==1.0.0
tiktoken==0.4.0
pandas==2.2.3
sentence-transformers==3.2.0
How to Run the Code
Setup Environment
Install required libraries:
Use the requirements.txt file to install all dependencies:
sh
pip install -r requirements.txt
Add Property Listings
Use the provided function to add property listings to the ChromaDB collection. The function takes in a collection instance, listing ID, description, metadata, and an embedding model to generate embeddings for the listings.

Perform Semantic Search
Query the collection based on user preferences. The search function constructs a search query text using user preferences and generates an embedding for the query. It then performs the search with metadata filters to find the top matching listings.

Augment Results
Use the augment_result function to generate explanations for the search results. This function constructs a prompt based on user preferences and the listing description, and then calls the LLM to generate an explanation of why the listing is perfect for the user.

Example Workflow
Define User Preferences:

Collect user preferences such as the number of bedrooms, bathrooms, important features, amenities, transportation options, neighborhood preferences, price range, and property type.
Parse User Preferences:

Use a function to parse the collected user preferences into a structured format.
Search for Matching Listings:

Use the search function to find listings that match the user preferences. The search results include listing IDs, distances, and descriptions.
Generate Explanations:

Use the augment_result function to generate explanations for the top matching listings based on the user preferences.
Contact Information
For further assistance, please contact support at kevinpol18@yahoo.com.